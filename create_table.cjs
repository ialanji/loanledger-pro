// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞ –≤—Ä—É—á–Ω—É—é
const fs = require('fs');
const path = require('path');

const envPath = path.join(__dirname, '.env');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length > 0) {
      const value = valueParts.join('=').trim();
      // –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      process.env[key.trim()] = value.replace(/^["']|["']$/g, '');
    }
  });
}

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

console.log('URL:', supabaseUrl);
console.log('Key:', supabaseKey ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');

const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(supabaseUrl, supabaseKey);

async function createTable() {
  console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã expense_sources...');
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ SQL
    const { data, error } = await supabase
      .from('_sql')
      .select('*')
      .eq('query', `
        CREATE TABLE IF NOT EXISTS expense_sources (
          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
          category VARCHAR NOT NULL UNIQUE CHECK (category IN ('salary', 'transport', 'supplies', 'other')),
          sheet_url TEXT NOT NULL,
          import_mode VARCHAR NOT NULL DEFAULT 'google_sheets' CHECK (import_mode IN ('google_sheets', 'file')),
          sheet_name VARCHAR,
          range_start VARCHAR DEFAULT 'A2',
          range_end VARCHAR,
          column_mapping JSONB,
          is_active BOOLEAN DEFAULT true,
          last_import_at TIMESTAMP WITH TIME ZONE,
          created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
          import_settings JSONB DEFAULT '{}',
          validation_rules JSONB DEFAULT '{}'
        );
      `);
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:', error);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —á–µ—Ä–µ–∑ REST API
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...');
      
      const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`
        },
        body: JSON.stringify({
          sql: `
            CREATE TABLE IF NOT EXISTS expense_sources (
              id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
              category VARCHAR NOT NULL UNIQUE CHECK (category IN ('salary', 'transport', 'supplies', 'other')),
              sheet_url TEXT NOT NULL,
              import_mode VARCHAR NOT NULL DEFAULT 'google_sheets' CHECK (import_mode IN ('google_sheets', 'file')),
              sheet_name VARCHAR,
              range_start VARCHAR DEFAULT 'A2',
              range_end VARCHAR,
              column_mapping JSONB,
              is_active BOOLEAN DEFAULT true,
              last_import_at TIMESTAMP WITH TIME ZONE,
              created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
              import_settings JSONB DEFAULT '{}',
              validation_rules JSONB DEFAULT '{}'
            );
          `
        })
      });
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ REST API:', await response.text());
        return;
      }
      
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ REST API');
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ expense_sources —Å–æ–∑–¥–∞–Ω–∞');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
    const { data: testData, error: testError } = await supabase
      .from('expense_sources')
      .select('*')
      .limit(1);
    
    if (testError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã:', testError);
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ expense_sources –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', testData.length);
    }
    
  } catch (err) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', err);
  }
}

createTable().catch(console.error);