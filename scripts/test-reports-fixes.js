#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–∞—Ö
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç E2E —Ç–µ—Å—Ç—ã
 */

import { spawn } from 'child_process';
import http from 'http';

const API_BASE = 'http://localhost:3001';
const FRONTEND_BASE = 'http://localhost:5173';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
function checkServer(url, name) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const options = {
      hostname: urlObj.hostname,
      port: urlObj.port,
      path: '/api/health',
      method: 'GET',
      timeout: 5000
    };

    const req = http.request(options, (res) => {
      if (res.statusCode === 200) {
        console.log(`‚úÖ ${name} —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç (${url})`);
        resolve(true);
      } else {
        console.log(`‚ùå ${name} —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å ${res.statusCode}`);
        reject(false);
      }
    });

    req.on('error', (err) => {
      console.log(`‚ùå ${name} —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${err.message}`);
      reject(false);
    });

    req.on('timeout', () => {
      console.log(`‚ùå ${name} —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (timeout)`);
      req.destroy();
      reject(false);
    });

    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Playwright —Ç–µ—Å—Ç–æ–≤
function runPlaywrightTests() {
  return new Promise((resolve, reject) => {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...\n');
    
    const playwright = spawn('npx', ['playwright', 'test', 'tests/e2e/reports-verification.spec.js', '--reporter=line'], {
      stdio: 'inherit',
      shell: true
    });

    playwright.on('close', (code) => {
      if (code === 0) {
        console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
        resolve(true);
      } else {
        console.log(`\n‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –∫–æ–¥–æ–º ${code}`);
        reject(false);
      }
    });

    playwright.on('error', (err) => {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: ${err.message}`);
      reject(false);
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–∞—Ö\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å backend —Å–µ—Ä–≤–µ—Ä–∞
    await checkServer(API_BASE, 'Backend API');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await runPlaywrightTests();
    
    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
    console.log('   ‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏');
    console.log('   ‚úÖ API –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    
  } catch (error) {
    console.log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
    console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run server');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –±–∞–∑–µ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main();