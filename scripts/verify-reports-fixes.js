#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–∞—Ö
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç E2E —Ç–µ—Å—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */

import { spawn } from 'child_process';
import http from 'http';

const API_BASE = 'http://localhost:3001';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
function checkServer() {
  return new Promise((resolve, reject) => {
    const req = http.request(`${API_BASE}/api/health`, (res) => {
      if (res.statusCode === 200) {
        resolve(true);
      } else {
        reject(false);
      }
    });

    req.on('error', () => reject(false));
    req.on('timeout', () => {
      req.destroy();
      reject(false);
    });
    req.setTimeout(5000);
    req.end();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ API
async function quickApiCheck() {
  try {
    console.log('üîç –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    const forecastReq = http.request(`${API_BASE}/api/reports/forecast`, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        const result = JSON.parse(data);
        console.log(`‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π: ${result.items.length} –∑–∞–ø–∏—Å–µ–π`);
        if (result.items.length > 0) {
          const first = result.items[0];
          console.log(`   –ü–µ—Ä–≤—ã–π –ø–ª–∞—Ç–µ–∂: ${first.bank}, ${first.month}, ${first.totalAmount} MDL`);
        }
      });
    });
    forecastReq.on('error', () => console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞'));
    forecastReq.end();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
    setTimeout(() => {
      const portfolioReq = http.request(`${API_BASE}/api/reports/portfolio`, (res) => {
        let data = '';
        res.on('data', chunk => data += chunk);
        res.on('end', () => {
          const result = JSON.parse(data);
          console.log(`‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ${result.items.length} –±–∞–Ω–∫–æ–≤`);
          if (result.items.length > 0) {
            const first = result.items[0];
            console.log(`   ${first.bank}: –æ—Å—Ç–∞—Ç–æ–∫ ${first.remainingBalance} MDL`);
          }
        });
      });
      portfolioReq.on('error', () => console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è'));
      portfolioReq.end();
    }, 500);

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
function runFullTests() {
  return new Promise((resolve, reject) => {
    console.log('\nüöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω—ã—Ö E2E —Ç–µ—Å—Ç–æ–≤...\n');
    
    const playwright = spawn('npx', ['playwright', 'test', 'tests/e2e/reports-fixes-simple.spec.js', '--reporter=line'], {
      stdio: 'inherit',
      shell: true
    });

    playwright.on('close', (code) => {
      if (code === 0) {
        resolve(true);
      } else {
        reject(false);
      }
    });

    playwright.on('error', (err) => {
      reject(err);
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–∞—Ö\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...');
    await checkServer();
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n');
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API
    await quickApiCheck();
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ç–µ—Å—Ç—ã
    await runFullTests();
    
    console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
    console.log('   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ');
    console.log('   ‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏');
    console.log('   ‚úÖ API –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ –í—Å–µ E2E —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ');
    console.log('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
    
  } catch (error) {
    console.log('\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run server');
    console.log('   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    console.log('   3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Playwright —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: npm install --save-dev @playwright/test');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
main();