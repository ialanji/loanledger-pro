/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * –ó–∞–¥–∞—á–∞ 11: Test portfolio report enhancements
 */

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
const mockPortfolioData = {
  totalPrincipal: 100000,
  totalCredits: 4,
  totalPaid: 25000,
  items: [
    {
      bank: '–ë–∞–Ω–∫ –ê',
      creditCount: 2,
      totalPrincipal: 60000,
      avgRate: 12.5,
      totalPaid: 15000,
      remainingBalance: 45000,
      credits: [
        {
          id: 'credit-1',
          contractNumber: 'CR-001',
          principal: 30000,
          startDate: '2024-01-15',
          paidAmount: 7500,
          remainingBalance: 22500,
          rate: 12.0
        },
        {
          id: 'credit-2', 
          contractNumber: 'CR-003',
          principal: 30000,
          startDate: '2024-02-01',
          paidAmount: 7500,
          remainingBalance: 22500,
          rate: 13.0
        }
      ]
    },
    {
      bank: '–ë–∞–Ω–∫ –ë',
      creditCount: 2,
      totalPrincipal: 40000,
      avgRate: 11.8,
      totalPaid: 10000,
      remainingBalance: 30000,
      credits: [
        {
          id: 'credit-3',
          contractNumber: 'CR-002',
          principal: 20000,
          startDate: '2024-01-20',
          paidAmount: 5000,
          remainingBalance: 15000,
          rate: 11.5
        },
        {
          id: 'credit-4',
          contractNumber: 'CR-004',
          principal: 20000,
          startDate: '2024-03-01',
          paidAmount: 5000,
          remainingBalance: 15000,
          rate: 12.1
        }
      ]
    }
  ]
};

// –¢–µ—Å—Ç 11.1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫—Ä–µ–¥–∏—Ç–æ–≤
function testCreditDetailsExpansion() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫—Ä–µ–¥–∏—Ç–æ–≤...\n');
  
  const tests = [
    {
      name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–Ω–∫–∞',
      test: () => {
        const bank = mockPortfolioData.items[0];
        return bank.bank && 
               bank.creditCount && 
               bank.credits && 
               Array.isArray(bank.credits) &&
               bank.credits.length === bank.creditCount;
      },
      description: '–ë–∞–Ω–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π creditCount'
    },
    {
      name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–∞',
      test: () => {
        const credit = mockPortfolioData.items[0].credits[0];
        const requiredFields = ['id', 'contractNumber', 'principal', 'startDate', 'paidAmount', 'remainingBalance', 'rate'];
        return requiredFields.every(field => credit[field] !== undefined);
      },
      description: '–ö—Ä–µ–¥–∏—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è'
    },
    {
      name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä–∞',
      test: () => {
        const credits = mockPortfolioData.items[0].credits;
        const sortedCredits = [...credits].sort((a, b) => (a.contractNumber || '').localeCompare(b.contractNumber || ''));
        return JSON.stringify(credits) === JSON.stringify(sortedCredits);
      },
      description: '–ö—Ä–µ–¥–∏—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –Ω–æ–º–µ—Ä—É –¥–æ–≥–æ–≤–æ—Ä–∞'
    },
    {
      name: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞',
      test: () => {
        const credit = mockPortfolioData.items[0].credits[0];
        const expectedRemaining = credit.principal - credit.paidAmount;
        return Math.abs(credit.remainingBalance - expectedRemaining) < 0.01;
      },
      description: '–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–∂–µ–Ω —Ä–∞–≤–Ω—è—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–º–º–µ –º–∏–Ω—É—Å –≤—ã–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞'
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  tests.forEach(test => {
    if (test.test()) {
      console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù`);
      console.log(`   ${test.description}`);
      passed++;
    } else {
      console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù`);
      console.log(`   ${test.description}`);
      failed++;
    }
    console.log('');
  });
  
  return { passed, failed };
}

// –¢–µ—Å—Ç 11.2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞
function testRemainingBalanceCalculation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞ –¥–æ–ª–≥–∞...\n');
  
  const tests = [
    {
      name: '–ö—Ä–µ–¥–∏—Ç –±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π',
      data: { principal: 50000, paidAmount: 0 },
      expectedRemaining: 50000,
      test: function() {
        return this.data.principal - this.data.paidAmount === this.expectedRemaining;
      }
    },
    {
      name: '–ö—Ä–µ–¥–∏—Ç —Å —á–∞—Å—Ç–∏—á–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏',
      data: { principal: 50000, paidAmount: 15000 },
      expectedRemaining: 35000,
      test: function() {
        return this.data.principal - this.data.paidAmount === this.expectedRemaining;
      }
    },
    {
      name: '–ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç',
      data: { principal: 50000, paidAmount: 50000 },
      expectedRemaining: 0,
      test: function() {
        return this.data.principal - this.data.paidAmount === this.expectedRemaining;
      }
    },
    {
      name: '–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç—É',
      data: { principal: 50000, paidAmount: 55000 },
      expectedRemaining: -5000,
      test: function() {
        return this.data.principal - this.data.paidAmount === this.expectedRemaining;
      }
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  tests.forEach(test => {
    const actualRemaining = test.data.principal - test.data.paidAmount;
    
    if (test.test()) {
      console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù`);
      console.log(`   –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞: ${test.data.principal}, –í—ã–ø–ª–∞—á–µ–Ω–æ: ${test.data.paidAmount}`);
      console.log(`   –û—Å—Ç–∞—Ç–æ–∫: ${actualRemaining} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.expectedRemaining})`);
      passed++;
    } else {
      console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù`);
      console.log(`   –û—Å–Ω–æ–≤–Ω–∞—è —Å—É–º–º–∞: ${test.data.principal}, –í—ã–ø–ª–∞—á–µ–Ω–æ: ${test.data.paidAmount}`);
      console.log(`   –û—Å—Ç–∞—Ç–æ–∫: ${actualRemaining} (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${test.expectedRemaining})`);
      failed++;
    }
    console.log('');
  });
  
  return { passed, failed };
}

// –¢–µ—Å—Ç 11.3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
function testWeightedAverageRateCalculation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏...\n');
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
  const testScenarios = [
    {
      name: '–û–±—ã—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å –¥–≤—É–º—è –∫—Ä–µ–¥–∏—Ç–∞–º–∏',
      credits: [
        { remainingBalance: 20000, rate: 12.0 },
        { remainingBalance: 30000, rate: 15.0 }
      ],
      expectedRate: 13.8, // (20000*12 + 30000*15) / (20000+30000) = 690000/50000 = 13.8
      description: '–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –¥–≤—É—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏'
    },
    {
      name: '–†–∞–≤–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏',
      credits: [
        { remainingBalance: 25000, rate: 10.0 },
        { remainingBalance: 25000, rate: 14.0 }
      ],
      expectedRate: 12.0, // (25000*10 + 25000*14) / (25000+25000) = 600000/50000 = 12.0
      description: '–°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å —Ä–∞–≤–Ω—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏'
    },
    {
      name: '–ù—É–ª–µ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫',
      credits: [
        { remainingBalance: 0, rate: 12.0 },
        { remainingBalance: 0, rate: 15.0 }
      ],
      expectedRate: 0, // –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –¥–æ–ª–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 0
      description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏'
    },
    {
      name: '–û–¥–∏–Ω –∫—Ä–µ–¥–∏—Ç —Å –Ω—É–ª–µ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–æ–º',
      credits: [
        { remainingBalance: 0, rate: 12.0 },
        { remainingBalance: 30000, rate: 15.0 }
      ],
      expectedRate: 15.0, // (0*12 + 30000*15) / (0+30000) = 450000/30000 = 15.0
      description: '–û–¥–∏–Ω –∫—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–µ–Ω, –≤—Ç–æ—Ä–æ–π –∞–∫—Ç–∏–≤–µ–Ω'
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  testScenarios.forEach(scenario => {
    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏
    const weightedRateSum = scenario.credits.reduce((sum, credit) => 
      sum + (credit.remainingBalance * credit.rate), 0);
    const totalWeight = scenario.credits.reduce((sum, credit) => 
      sum + credit.remainingBalance, 0);
    const avgRate = totalWeight > 0 ? weightedRateSum / totalWeight : 0;
    
    const tolerance = 0.01; // –î–æ–ø—É—Å—Ç–∏–º–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å
    const isCorrect = Math.abs(avgRate - scenario.expectedRate) < tolerance;
    
    if (isCorrect) {
      console.log(`‚úÖ ${scenario.name}: –ü–†–û–ô–î–ï–ù`);
      console.log(`   ${scenario.description}`);
      console.log(`   –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${avgRate.toFixed(2)}% (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${scenario.expectedRate}%)`);
      passed++;
    } else {
      console.log(`‚ùå ${scenario.name}: –ü–†–û–í–ê–õ–ï–ù`);
      console.log(`   ${scenario.description}`);
      console.log(`   –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${avgRate.toFixed(2)}% (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${scenario.expectedRate}%)`);
      console.log(`   –î–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞: weightedSum=${weightedRateSum}, totalWeight=${totalWeight}`);
      failed++;
    }
    console.log('');
  });
  
  return { passed, failed };
}

// –¢–µ—Å—Ç 11.4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –ø–æ –¥–∞—Ç–∞–º
function testDateFilters() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ –¥–∞—Ç–∞–º...\n');
  
  // –°–∏–º—É–ª—è—Ü–∏—è API –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
  async function testPortfolioAPI(filters) {
    const params = new URLSearchParams();
    
    if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
    if (filters.dateTo) params.append('dateTo', filters.dateTo);
    if (filters.bankId) params.append('bankId', filters.bankId);
    
    const url = `/api/reports/portfolio${params.toString() ? `?${params.toString()}` : ''}`;
    
    try {
      const response = await fetch(url);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      return {
        success: true,
        data,
        itemCount: data.items ? data.items.length : 0
      };
    } catch (error) {
      return {
        success: false,
        error: error.message
      };
    }
  }
  
  const testCases = [
    {
      name: '–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞',
      filters: { dateFrom: '2024-01-01' },
      description: '–î–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏, –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã'
    },
    {
      name: '–§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è',
      filters: { dateTo: '2024-12-31' },
      description: '–î–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏, –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã'
    },
    {
      name: '–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç',
      filters: { dateFrom: '2024-01-01', dateTo: '2024-12-31' },
      description: '–î–æ–ª–∂–µ–Ω —É—á–∏—Ç—ã–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ'
    },
    {
      name: '–§–∏–ª—å—Ç—Ä –ø–æ –±–∞–Ω–∫—É –∏ –¥–∞—Ç–∞–º',
      filters: { dateFrom: '2024-01-01', dateTo: '2024-12-31', bankId: 'test-bank-id' },
      description: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±–∞–Ω–∫—É –∏ –¥–∞—Ç–∞–º'
    }
  ];
  
  console.log('üìã –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:');
  testCases.forEach((testCase, index) => {
    console.log(`${index + 1}. ${testCase.name}`);
    console.log(`   –§–∏–ª—å—Ç—Ä—ã: ${JSON.stringify(testCase.filters)}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${testCase.description}`);
    console.log('');
  });
  
  console.log('‚ÑπÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä');
  
  return { testCases };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
function runPortfolioEnhancementTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...\n');
  
  const expansionResults = testCreditDetailsExpansion();
  const balanceResults = testRemainingBalanceCalculation();
  const rateResults = testWeightedAverageRateCalculation();
  const dateFilterResults = testDateFilters();
  
  const totalPassed = expansionResults.passed + balanceResults.passed + rateResults.passed;
  const totalFailed = expansionResults.failed + balanceResults.failed + rateResults.failed;
  const totalTests = totalPassed + totalFailed;
  
  console.log('\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–†–¢–§–ï–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê:');
  console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
  console.log(`   ‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
  console.log(`   üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((totalPassed / totalTests) * 100)}%`);
  
  console.log('\nüìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:');
  console.log(`   üîç –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π: ${expansionResults.passed}/${expansionResults.passed + expansionResults.failed}`);
  console.log(`   üí∞ –†–∞—Å—á–µ—Ç –æ—Å—Ç–∞—Ç–∫–æ–≤: ${balanceResults.passed}/${balanceResults.passed + balanceResults.failed}`);
  console.log(`   üìà –°—Ä–µ–¥–Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ${rateResults.passed}/${rateResults.passed + rateResults.failed}`);
  console.log(`   üìÖ –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º: ${dateFilterResults.testCases.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ`);
  
  return {
    totalPassed,
    totalFailed,
    successRate: Math.round((totalPassed / totalTests) * 100),
    details: {
      expansion: expansionResults,
      balance: balanceResults,
      rate: rateResults,
      dateFilters: dateFilterResults
    }
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    mockPortfolioData,
    testCreditDetailsExpansion,
    testRemainingBalanceCalculation,
    testWeightedAverageRateCalculation,
    testDateFilters,
    runPortfolioEnhancementTests
  };
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if (typeof window !== 'undefined') {
  console.log('–¢–µ—Å—Ç—ã –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ runPortfolioEnhancementTests() –¥–ª—è –∑–∞–ø—É—Å–∫–∞.');
} else if (require.main === module) {
  runPortfolioEnhancementTests();
}