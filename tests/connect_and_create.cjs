const { Client } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

function buildClientConfig(preferDatabase) {
  const connectionString = process.env.POSTGRES_URL || process.env.DATABASE_URL;
  if (connectionString) {
    // If connection string is provided, allow overriding database if preferDatabase is passed
    return preferDatabase ? { connectionString, database: preferDatabase } : { connectionString };
  }
  const cfg = {
    user: process.env.POSTGRES_USER || process.env.DB_USER,
    host: process.env.POSTGRES_HOST || process.env.DB_HOST,
    database: preferDatabase || process.env.POSTGRES_DATABASE || process.env.DB_NAME,
    password: process.env.POSTGRES_PASSWORD || process.env.DB_PASSWORD,
    port: Number(process.env.POSTGRES_PORT || process.env.DB_PORT),
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
  };
  const missing = Object.entries(cfg)
    .filter(([key, val]) => (key === 'port' ? Number.isNaN(val) || !val : val === undefined || val === ''))
    .map(([key]) => key);
  if (missing.length > 0) {
    console.error(`Database configuration is incomplete. Missing: ${missing.join(', ')}`);
    throw new Error('Set POSTGRES_* or DB_* variables in .env or provide POSTGRES_URL/DATABASE_URL.');
  }
  return cfg;
}

async function connectAndCreateTable() {
  // Connect to target DB defined in .env
  const client = new Client(buildClientConfig());

  try {
    console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...');
    await client.connect();
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlFile = path.join(__dirname, 'create_expense_sources.sql');
    const sql = fs.readFileSync(sqlFile, 'utf8');

    console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —Å–∫—Ä–∏–ø—Ç–∞...');
    await client.query(sql);
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ expense_sources —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–ª–∞—Å—å
    const result = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name = 'expense_sources'
    `);

    if (result.rows.length > 0) {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ expense_sources –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const dataResult = await client.query('SELECT * FROM expense_sources');
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${dataResult.rows.length} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ expense_sources`);
      
      if (dataResult.rows.length > 0) {
        console.log('–ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:');
        dataResult.rows.forEach((row, index) => {
          console.log(`${index + 1}. ${row.category} - ${row.sheet_name}`);
        });
      }
    } else {
      console.log('‚ùå –¢–∞–±–ª–∏—Ü–∞ expense_sources –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.code) {
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    }
    process.exitCode = 1;
  } finally {
    await client.end();
    console.log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

connectAndCreateTable();