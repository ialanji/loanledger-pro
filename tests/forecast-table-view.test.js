/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 * –ó–∞–¥–∞—á–∞ 10.2: Test table view rendering
 */

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
const mockForecastData = {
  items: [
    {
      bank: '–ë–∞–Ω–∫ –ê',
      creditNumber: 'CR-001',
      month: '2024-01',
      principalAmount: 10000,
      interestAmount: 500,
      totalAmount: 10500
    },
    {
      bank: '–ë–∞–Ω–∫ –ë',
      creditNumber: 'CR-002', 
      month: '2024-01',
      principalAmount: 15000,
      interestAmount: 750,
      totalAmount: 15750
    },
    {
      bank: '–ë–∞–Ω–∫ –ê',
      creditNumber: 'CR-003',
      month: '2024-02',
      principalAmount: 12000,
      interestAmount: 600,
      totalAmount: 12600
    },
    {
      bank: '–ë–∞–Ω–∫ –ë',
      creditNumber: 'CR-004',
      month: '2024-02',
      principalAmount: 18000,
      interestAmount: 900,
      totalAmount: 18900
    }
  ]
};

// –ö–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ transformToPivotTable –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function transformToPivotTable(items) {
  const pivotData = {};

  items.forEach(item => {
    const key = item.month; // –§–æ—Ä–º–∞—Ç: "2024-01"
    const [year, monthNum] = key.split('-');
    const monthName = new Date(parseInt(year), parseInt(monthNum) - 1).toLocaleDateString('ru-RU', { 
      year: 'numeric', 
      month: 'long' 
    });

    if (!pivotData[key]) {
      pivotData[key] = {
        year: parseInt(year),
        month: monthName,
        banks: {},
        totals: { principal: 0, interest: 0 }
      };
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–∫–∞, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!pivotData[key].banks[item.bank]) {
      pivotData[key].banks[item.bank] = { principal: 0, interest: 0 };
    }

    // –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Å—É–º–º—ã –ø–æ –±–∞–Ω–∫–∞–º
    pivotData[key].banks[item.bank].principal += item.principalAmount || 0;
    pivotData[key].banks[item.bank].interest += item.interestAmount || 0;

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏
    pivotData[key].totals.principal += item.principalAmount || 0;
    pivotData[key].totals.interest += item.interestAmount || 0;
  });

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≥–æ–¥—É/–º–µ—Å—è—Ü—É
  return Object.entries(pivotData)
    .map(([key, data]) => ({ key, ...data }))
    .sort((a, b) => a.key.localeCompare(b.key));
}

// –ö–æ–ø–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ getUniqueBankNames –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function getUniqueBankNames(items) {
  const bankNames = [...new Set(items.map(item => item.bank))];
  return bankNames.sort(); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
}

// –¢–µ—Å—Ç—ã —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
function testPivotTableTransformation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É...\n');
  
  const pivotData = transformToPivotTable(mockForecastData.items);
  const uniqueBanks = getUniqueBankNames(mockForecastData.items);
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:');
  console.log('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏:', uniqueBanks);
  console.log('–î–∞–Ω–Ω—ã–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã:', JSON.stringify(pivotData, null, 2));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
  const tests = [
    {
      name: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤',
      test: () => pivotData.length === 2,
      expected: 2,
      actual: pivotData.length
    },
    {
      name: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–Ω–∫–∏',
      test: () => uniqueBanks.length === 2 && uniqueBanks.includes('–ë–∞–Ω–∫ –ê') && uniqueBanks.includes('–ë–∞–Ω–∫ –ë'),
      expected: ['–ë–∞–Ω–∫ –ê', '–ë–∞–Ω–∫ –ë'],
      actual: uniqueBanks
    },
    {
      name: '–î–∞–Ω–Ω—ã–µ –∑–∞ —è–Ω–≤–∞—Ä—å 2024',
      test: () => {
        const jan2024 = pivotData.find(p => p.key === '2024-01');
        return jan2024 && 
               jan2024.banks['–ë–∞–Ω–∫ –ê'].principal === 10000 &&
               jan2024.banks['–ë–∞–Ω–∫ –ë'].principal === 15000 &&
               jan2024.totals.principal === 25000;
      },
      expected: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —è–Ω–≤–∞—Ä—å',
      actual: pivotData.find(p => p.key === '2024-01')
    },
    {
      name: '–î–∞–Ω–Ω—ã–µ –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å 2024',
      test: () => {
        const feb2024 = pivotData.find(p => p.key === '2024-02');
        return feb2024 && 
               feb2024.banks['–ë–∞–Ω–∫ –ê'].principal === 12000 &&
               feb2024.banks['–ë–∞–Ω–∫ –ë'].principal === 18000 &&
               feb2024.totals.principal === 30000;
      },
      expected: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Ñ–µ–≤—Ä–∞–ª—å',
      actual: pivotData.find(p => p.key === '2024-02')
    },
    {
      name: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º',
      test: () => {
        return pivotData[0].key === '2024-01' && pivotData[1].key === '2024-02';
      },
      expected: '–Ø–Ω–≤–∞—Ä—å –ø–µ—Ä–µ–¥ —Ñ–µ–≤—Ä–∞–ª–µ–º',
      actual: pivotData.map(p => p.key)
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  tests.forEach(test => {
    if (test.test()) {
      console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù`);
      passed++;
    } else {
      console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù`);
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${JSON.stringify(test.expected)}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${JSON.stringify(test.actual)}`);
      failed++;
    }
  });
  
  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏:`);
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / tests.length) * 100)}%`);
  
  return { passed, failed, pivotData, uniqueBanks };
}

// –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–∏—Ö –∏—Ç–æ–≥–æ–≤
function testGrandTotalsCalculation() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–∏—Ö –∏—Ç–æ–≥–æ–≤...\n');
  
  const pivotData = transformToPivotTable(mockForecastData.items);
  const uniqueBanks = getUniqueBankNames(mockForecastData.items);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –∏—Ç–æ–≥–∏ (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞)
  const grandTotals = {
    principal: pivotData.reduce((sum, row) => sum + row.totals.principal, 0),
    interest: pivotData.reduce((sum, row) => sum + row.totals.interest, 0),
    banks: uniqueBanks.reduce((acc, bank) => {
      acc[bank] = {
        principal: pivotData.reduce((sum, row) => sum + (row.banks[bank]?.principal || 0), 0),
        interest: pivotData.reduce((sum, row) => sum + (row.banks[bank]?.interest || 0), 0)
      };
      return acc;
    }, {})
  };
  
  console.log('üìä –û–±—â–∏–µ –∏—Ç–æ–≥–∏:', JSON.stringify(grandTotals, null, 2));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ç–æ–≥–æ–≤
  const tests = [
    {
      name: '–û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É –¥–æ–ª–≥—É',
      test: () => grandTotals.principal === 55000, // 10000 + 15000 + 12000 + 18000
      expected: 55000,
      actual: grandTotals.principal
    },
    {
      name: '–û–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º',
      test: () => grandTotals.interest === 2750, // 500 + 750 + 600 + 900
      expected: 2750,
      actual: grandTotals.interest
    },
    {
      name: '–ò—Ç–æ–≥ –ø–æ –ë–∞–Ω–∫—É –ê (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥)',
      test: () => grandTotals.banks['–ë–∞–Ω–∫ –ê'].principal === 22000, // 10000 + 12000
      expected: 22000,
      actual: grandTotals.banks['–ë–∞–Ω–∫ –ê'].principal
    },
    {
      name: '–ò—Ç–æ–≥ –ø–æ –ë–∞–Ω–∫—É –ë (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥)',
      test: () => grandTotals.banks['–ë–∞–Ω–∫ –ë'].principal === 33000, // 15000 + 18000
      expected: 33000,
      actual: grandTotals.banks['–ë–∞–Ω–∫ –ë'].principal
    },
    {
      name: '–ò—Ç–æ–≥ –ø–æ –ë–∞–Ω–∫—É –ê (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)',
      test: () => grandTotals.banks['–ë–∞–Ω–∫ –ê'].interest === 1100, // 500 + 600
      expected: 1100,
      actual: grandTotals.banks['–ë–∞–Ω–∫ –ê'].interest
    },
    {
      name: '–ò—Ç–æ–≥ –ø–æ –ë–∞–Ω–∫—É –ë (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)',
      test: () => grandTotals.banks['–ë–∞–Ω–∫ –ë'].interest === 1650, // 750 + 900
      expected: 1650,
      actual: grandTotals.banks['–ë–∞–Ω–∫ –ë'].interest
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  tests.forEach(test => {
    if (test.test()) {
      console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù`);
      passed++;
    } else {
      console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù`);
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${test.actual}`);
      failed++;
    }
  });
  
  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤:`);
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / tests.length) * 100)}%`);
  
  return { passed, failed, grandTotals };
}

// –¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–ø–∏—Å–æ—á–Ω—ã–º –∏ —Ç–∞–±–ª–∏—á–Ω—ã–º –≤–∏–¥–∞–º–∏
function testDataConsistency() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –≤–∏–¥–∞–º–∏...\n');
  
  const pivotData = transformToPivotTable(mockForecastData.items);
  
  // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ –≤ —Å–ø–∏—Å–æ—á–Ω–æ–º –≤–∏–¥–µ)
  const listViewTotals = {
    principal: mockForecastData.items.reduce((sum, item) => sum + (item.principalAmount || 0), 0),
    interest: mockForecastData.items.reduce((sum, item) => sum + (item.interestAmount || 0), 0),
    total: mockForecastData.items.reduce((sum, item) => sum + (item.totalAmount || 0), 0)
  };
  
  // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–∏ –∏–∑ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã (–∫–∞–∫ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º –≤–∏–¥–µ)
  const tableViewTotals = {
    principal: pivotData.reduce((sum, row) => sum + row.totals.principal, 0),
    interest: pivotData.reduce((sum, row) => sum + row.totals.interest, 0),
    total: pivotData.reduce((sum, row) => sum + row.totals.principal + row.totals.interest, 0)
  };
  
  console.log('üìä –ò—Ç–æ–≥–∏ —Å–ø–∏—Å–æ—á–Ω–æ–≥–æ –≤–∏–¥–∞:', listViewTotals);
  console.log('üìä –ò—Ç–æ–≥–∏ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞:', tableViewTotals);
  
  const tests = [
    {
      name: '–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–ª–≥–∞',
      test: () => listViewTotals.principal === tableViewTotals.principal,
      expected: listViewTotals.principal,
      actual: tableViewTotals.principal
    },
    {
      name: '–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤',
      test: () => listViewTotals.interest === tableViewTotals.interest,
      expected: listViewTotals.interest,
      actual: tableViewTotals.interest
    },
    {
      name: '–ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–±—â–∏—Ö –∏—Ç–æ–≥–æ–≤',
      test: () => listViewTotals.total === tableViewTotals.total,
      expected: listViewTotals.total,
      actual: tableViewTotals.total
    }
  ];
  
  let passed = 0;
  let failed = 0;
  
  tests.forEach(test => {
    if (test.test()) {
      console.log(`‚úÖ ${test.name}: –ü–†–û–ô–î–ï–ù`);
      passed++;
    } else {
      console.log(`‚ùå ${test.name}: –ü–†–û–í–ê–õ–ï–ù`);
      console.log(`   –û–∂–∏–¥–∞–ª–æ—Å—å: ${test.expected}`);
      console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${test.actual}`);
      failed++;
    }
  });
  
  console.log(`\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏:`);
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / tests.length) * 100)}%`);
  
  return { passed, failed };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞
function runTableViewTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...\n');
  
  const transformationResults = testPivotTableTransformation();
  const totalsResults = testGrandTotalsCalculation();
  const consistencyResults = testDataConsistency();
  
  const totalPassed = transformationResults.passed + totalsResults.passed + consistencyResults.passed;
  const totalFailed = transformationResults.failed + totalsResults.failed + consistencyResults.failed;
  const totalTests = totalPassed + totalFailed;
  
  console.log('\nüéØ –û–ë–©–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –¢–ê–ë–õ–ò–ß–ù–û–ì–û –í–ò–î–ê:');
  console.log(`   ‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–π–¥–µ–Ω–æ: ${totalPassed}`);
  console.log(`   ‚ùå –í—Å–µ–≥–æ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalFailed}`);
  console.log(`   üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((totalPassed / totalTests) * 100)}%`);
  
  return {
    totalPassed,
    totalFailed,
    successRate: Math.round((totalPassed / totalTests) * 100)
  };
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    mockForecastData,
    transformToPivotTable,
    getUniqueBankNames,
    testPivotTableTransformation,
    testGrandTotalsCalculation,
    testDataConsistency,
    runTableViewTests
  };
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if (typeof window !== 'undefined') {
  console.log('–¢–µ—Å—Ç—ã —Ç–∞–±–ª–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ runTableViewTests() –¥–ª—è –∑–∞–ø—É—Å–∫–∞.');
} else if (require.main === module) {
  runTableViewTests();
}