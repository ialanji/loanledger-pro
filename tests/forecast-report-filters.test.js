/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è–º–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
 * –ó–∞–¥–∞—á–∞ 10.1: Test list view with various filter combinations
 */

const testCases = [
  {
    name: '–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)',
    filters: {},
    description: '–î–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞',
    expectedBehavior: '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫—Ä–µ–¥–∏—Ç—ã –∏ –ø–ª–∞—Ç–µ–∂–∏'
  },
  {
    name: '–¢–æ–ª—å–∫–æ dateFrom',
    filters: { dateFrom: '2024-01-01' },
    description: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã',
    expectedBehavior: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ start_date >= dateFrom'
  },
  {
    name: '–¢–æ–ª—å–∫–æ dateTo', 
    filters: { dateTo: '2024-12-31' },
    description: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∞—Ç—ã',
    expectedBehavior: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ start_date <= dateTo'
  },
  {
    name: '–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç',
    filters: { dateFrom: '2024-01-01', dateTo: '2024-12-31' },
    description: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç',
    expectedBehavior: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ start_date >= dateFrom AND start_date <= dateTo'
  },
  {
    name: '–§–∏–ª—å—Ç—Ä –ø–æ –±–∞–Ω–∫—É',
    filters: { bankId: 'test-bank-uuid' },
    description: '–î–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–∫–∞',
    expectedBehavior: '–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ bank_id = bankId'
  },
  {
    name: '–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤–º–µ—Å—Ç–µ',
    filters: { 
      dateFrom: '2024-01-01', 
      dateTo: '2024-12-31', 
      bankId: 'test-bank-uuid' 
    },
    description: '–î–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
    expectedBehavior: '–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function testForecastAPI(filters) {
  const params = new URLSearchParams();
  
  if (filters.dateFrom) params.append('dateFrom', filters.dateFrom);
  if (filters.dateTo) params.append('dateTo', filters.dateTo);
  if (filters.bankId) params.append('bankId', filters.bankId);
  
  const url = `/api/reports/forecast${params.toString() ? `?${params.toString()}` : ''}`;
  
  try {
    const response = await fetch(url);
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    return {
      success: true,
      data,
      itemCount: data.items ? data.items.length : 0
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
function validateForecastResponse(data) {
  const errors = [];
  
  if (!data.items || !Array.isArray(data.items)) {
    errors.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–∞—Å—Å–∏–≤ items –≤ –æ—Ç–≤–µ—Ç–µ');
    return errors;
  }
  
  data.items.forEach((item, index) => {
    const requiredFields = ['bank', 'creditNumber', 'month', 'principalAmount', 'interestAmount', 'totalAmount'];
    
    requiredFields.forEach(field => {
      if (item[field] === undefined || item[field] === null) {
        errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ ${field} –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${index}`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (typeof item.principalAmount !== 'number') {
      errors.push(`principalAmount –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${index}`);
    }
    
    if (typeof item.interestAmount !== 'number') {
      errors.push(`interestAmount –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${index}`);
    }
    
    if (typeof item.totalAmount !== 'number') {
      errors.push(`totalAmount –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${index}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –º–µ—Å—è—Ü–∞ (YYYY-MM)
    if (!/^\d{4}-\d{2}$/.test(item.month)) {
      errors.push(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞ ${item.month} –≤ —ç–ª–µ–º–µ–Ω—Ç–µ ${index}`);
    }
  });
  
  return errors;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runForecastFilterTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏...\n');
  
  const results = [];
  
  for (const testCase of testCases) {
    console.log(`üìã –¢–µ—Å—Ç: ${testCase.name}`);
    console.log(`   –§–∏–ª—å—Ç—Ä—ã: ${JSON.stringify(testCase.filters)}`);
    console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${testCase.description}`);
    
    const result = await testForecastAPI(testCase.filters);
    
    if (result.success) {
      const validationErrors = validateForecastResponse(result.data);
      
      if (validationErrors.length === 0) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ - –ø–æ–ª—É—á–µ–Ω–æ ${result.itemCount} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        results.push({ ...testCase, status: 'PASS', itemCount: result.itemCount });
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:`);
        validationErrors.forEach(error => console.log(`      - ${error}`));
        results.push({ ...testCase, status: 'FAIL', errors: validationErrors });
      }
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ API: ${result.error}`);
      results.push({ ...testCase, status: 'ERROR', error: result.error });
    }
    
    console.log('');
  }
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  const passed = results.filter(r => r.status === 'PASS').length;
  const failed = results.filter(r => r.status === 'FAIL').length;
  const errors = results.filter(r => r.status === 'ERROR').length;
  
  console.log('üìä –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:');
  console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
  console.log(`   üö´ –û—à–∏–±–∫–∏: ${errors}`);
  console.log(`   üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / results.length) * 100)}%`);
  
  return results;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–∞—Ö
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    testCases,
    testForecastAPI,
    validateForecastResponse,
    runForecastFilterTests
  };
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
if (typeof window !== 'undefined') {
  // –ë—Ä–∞—É–∑–µ—Ä–Ω–∞—è —Å—Ä–µ–¥–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
  console.log('–¢–µ—Å—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ runForecastFilterTests() –¥–ª—è –∑–∞–ø—É—Å–∫–∞.');
} else if (require.main === module) {
  // Node.js —Å—Ä–µ–¥–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
  runForecastFilterTests().catch(console.error);
}