/**
 * –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ—Ç—á–µ—Ç–∞—Ö
 * –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –±–µ–∑ —Å—Ç—Ä–æ–≥–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¥–∞–Ω–Ω—ã–º
 */
import { test, expect } from '@playwright/test';

test.describe('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ - –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', () => {
  const API_BASE = 'http://localhost:3001';

  test('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç', async ({ request }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const response = await request.get(`${API_BASE}/api/health`);
    expect(response.status()).toBe(200);
    
    const data = await response.json();
    expect(data.status).toBe('OK');
    
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  test('‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π API –Ω–µ –ø–∞–¥–∞–µ—Ç', async ({ request }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –ø–∞–¥–∞–µ—Ç...');
    
    const response = await request.get(`${API_BASE}/api/reports/forecast`);
    expect(response.status()).toBe(200);
    
    const data = await response.json();
    expect(data).toHaveProperty('items');
    expect(Array.isArray(data.items)).toBe(true);
    
    console.log(`‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–µ—Ä–Ω—É–ª ${data.items.length} –∑–∞–ø–∏—Å–µ–π`);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (data.items.length > 0) {
      const firstItem = data.items[0];
      expect(firstItem).toHaveProperty('bank');
      expect(firstItem).toHaveProperty('month');
      console.log(`‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
    } else {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å–ª–µ–¥—É—é—â–∏–µ 12 –º–µ—Å—è—Ü–µ–≤');
    }
  });

  test('‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', async ({ request }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    
    const response = await request.get(`${API_BASE}/api/reports/portfolio`);
    expect(response.status()).toBe(200);
    
    const data = await response.json();
    expect(data).toHaveProperty('items');
    expect(Array.isArray(data.items)).toBe(true);
    
    console.log(`‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–µ—Ä–Ω—É–ª ${data.items.length} –±–∞–Ω–∫–æ–≤`);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (data.items.length > 0) {
      const firstBank = data.items[0];
      expect(firstBank).toHaveProperty('bank');
      expect(firstBank).toHaveProperty('creditCount');
      expect(firstBank).toHaveProperty('totalPrincipal');
      expect(firstBank).toHaveProperty('remainingBalance');
      expect(firstBank).toHaveProperty('credits');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –æ—Å—Ç–∞—Ç–∫–æ–≤
      const expectedRemaining = firstBank.totalPrincipal - firstBank.totalPaid;
      expect(Math.abs(firstBank.remainingBalance - expectedRemaining)).toBeLessThan(0.01);
      
      console.log(`‚úÖ –ë–∞–Ω–∫: ${firstBank.bank}, –æ—Å—Ç–∞—Ç–æ–∫: ${firstBank.remainingBalance} MDL`);
    } else {
      console.log('‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º');
    }
  });

  test('‚úÖ API –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', async ({ request }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é API...');
    
    // –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    const invalidDateResponse = await request.get(`${API_BASE}/api/reports/forecast?dateFrom=01-01-2024`);
    expect(invalidDateResponse.status()).toBe(400);
    
    const dateError = await invalidDateResponse.json();
    expect(dateError).toHaveProperty('error');
    expect(dateError.error).toContain('Invalid dateFrom format');
    
    // –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ bankId
    const invalidBankResponse = await request.get(`${API_BASE}/api/reports/forecast?bankId=12345`);
    expect(invalidBankResponse.status()).toBe(400);
    
    const bankError = await invalidBankResponse.json();
    expect(bankError).toHaveProperty('error');
    expect(bankError.error).toContain('Invalid bankId format');
    
    console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  });

  test('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã', async ({ request }) => {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    
    const response = await request.get(`${API_BASE}/api/test/forecast-data`);
    expect(response.status()).toBe(200);
    
    const data = await response.json();
    expect(data).toHaveProperty('credits');
    expect(data).toHaveProperty('rates');
    expect(data).toHaveProperty('creditsCount');
    expect(data).toHaveProperty('ratesCount');
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${data.creditsCount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏ ${data.ratesCount} —Å—Ç–∞–≤–æ–∫`);
    
    // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    expect(data.creditsCount).toBeGreaterThan(0);
    expect(data.ratesCount).toBeGreaterThan(0);
  });

  test('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ', async ({ request }) => {
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');
    
    // 1. –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π
    const forecastResponse = await request.get(`${API_BASE}/api/reports/forecast`);
    expect(forecastResponse.status()).toBe(200);
    
    // 2. –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const portfolioResponse = await request.get(`${API_BASE}/api/reports/portfolio`);
    expect(portfolioResponse.status()).toBe(200);
    
    const portfolioData = await portfolioResponse.json();
    
    // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
    const validationResponse = await request.get(`${API_BASE}/api/reports/forecast?dateFrom=invalid`);
    expect(validationResponse.status()).toBe(400);
    
    console.log('üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Ä–∞–±–æ—Ç–∞—é—Ç!');
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
    console.log('   ‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–µ –ø–∞–¥–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π');
    console.log('   ‚úÖ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('   ‚úÖ API –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä —Å—Ç–∞–±–∏–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã');
  });
});