const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
const envPath = path.join(__dirname, '.env');
const envContent = fs.readFileSync(envPath, 'utf8');
const envLines = envContent.split('\n');

envLines.forEach(line => {
  if (line.trim() && !line.startsWith('#')) {
    const [key, ...valueParts] = line.split('=');
    if (key && valueParts.length > 0) {
      let value = valueParts.join('=').trim();
      value = value.replace(/^["']|["']$/g, '');
      process.env[key.trim()] = value;
    }
  }
});

const supabase = createClient(process.env.VITE_SUPABASE_URL, process.env.VITE_SUPABASE_ANON_KEY);

async function checkTable() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');
    const { data, error } = await supabase.from('expense_sources').select('*').limit(1);
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ expense_sources:');
      console.log('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
      console.log('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
      console.log('–î–µ—Ç–∞–ª–∏:', error.details);
      
      if (error.code === 'PGRST116' || error.message.includes('does not exist')) {
        console.log('\nüîç –¢–∞–±–ª–∏—Ü–∞ expense_sources –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL —Å–∫—Ä–∏–ø—Ç manual_table_creation.sql –≤ Supabase Dashboard');
      }
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ expense_sources —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', data ? data.length : 0);
      if (data && data.length > 0) {
        console.log('–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å:', JSON.stringify(data[0], null, 2));
      }
    }
  } catch (err) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message);
  }
}

checkTable();